[{"/home/julianfssen/Projects/wejimat/client/src/index.js":"1","/home/julianfssen/Projects/wejimat/client/src/App.js":"2","/home/julianfssen/Projects/wejimat/client/src/reportWebVitals.js":"3","/home/julianfssen/Projects/wejimat/client/src/components/User.js":"4","/home/julianfssen/Projects/wejimat/client/src/components/Transaction.js":"5"},{"size":500,"mtime":1608887338515,"results":"6","hashOfConfig":"7"},{"size":1516,"mtime":1608981291562,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1608887338515,"results":"9","hashOfConfig":"7"},{"size":2589,"mtime":1608981382088,"results":"10","hashOfConfig":"7"},{"size":5033,"mtime":1608975047704,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"jslcka",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"14"},"/home/julianfssen/Projects/wejimat/client/src/index.js",[],["24","25"],"/home/julianfssen/Projects/wejimat/client/src/App.js",[],"/home/julianfssen/Projects/wejimat/client/src/reportWebVitals.js",[],"/home/julianfssen/Projects/wejimat/client/src/components/User.js",[],"/home/julianfssen/Projects/wejimat/client/src/components/Transaction.js",["26"],"import React, { useState, useEffect } from \"react\";\n\nfunction Transaction() {\n\tconst [transactionName, setTransactionName] = useState('');\n\tconst [transactionAmount, setTransactionAmount] = useState(0);\n\tconst [transactions, setTransactions] = useState([]);\n\tconst [paymentChannels, setPaymentChannels] = useState([]);\n\tconst [selectedPaymentChannel, setSelectedPaymentChannel] = useState('Boost');\n\tconst [transactionsByChannel, setPaymentChannelToView] = useState('');\n\n\tconst MONTHS = [\n\t  'January',\n\t  'February',\n\t  'March',\n\t  'April',\n\t  'May',\n\t  'June',\n\t  'July',\n\t  'August',\n\t  'September',\n\t  'October',\n\t  'November',\n\t  'December'\n\t];\n\n\tconst viewAllTransactions = () => {\n\t\tfetch('http://localhost:3000/api/v1/expenses', {\n\t\t\tmethod: 'GET',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t'Accept': 'application/json',\n\t\t\t\t'Authorization': localStorage.getItem('token')\n\t\t\t}\n\t\t})\n\t\t\t.then(response => response.json())\n\t\t\t.then(txns => {\n\t\t\t\tsetTransactions(txns)\n\t\t\t})\n\t}\n\n\tconst viewPaymentsByChannel = (channel) => {\n\t\tsetPaymentChannelToView(channel);\n\t\tfetch(`http://localhost:3000/api/v1/expenses?payment_channel=${channel}`, {\n\t\t\tmethod: 'GET',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t'Accept': 'application/json',\n\t\t\t\t'Authorization': localStorage.getItem('token')\n\t\t\t}\n\t\t})\n\t\t\t.then(response => response.json())\n\t\t\t.then(txns => {\n\t\t\t\tsetTransactions(txns);\n\t\t\t})\n\t}\n\n\tconst viewPaymentsByMonth = (month) => {\n\t\tfetch(`http://localhost:3000/api/v1/expenses?month=${month}`, {\n\t\t\tmethod: 'GET',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t'Accept': 'application/json',\n\t\t\t\t'Authorization': localStorage.getItem('token')\n\t\t\t}\n\t\t})\n\t\t\t.then(response => response.json())\n\t\t\t.then(txns => {\n\t\t\t\tsetTransactions(txns);\n\t\t\t})\n\t}\n\n\tconst viewPaymentsByDate = (date) => {\n\t\tlet formattedDate = date.replaceAll('-', '');\n\t\tfetch(`http://localhost:3000/api/v1/expenses?date=${formattedDate}`, {\n\t\t\tmethod: 'GET',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t'Accept': 'application/json',\n\t\t\t\t'Authorization': localStorage.getItem('token')\n\t\t\t}\n\t\t})\n\t\t\t.then(response => response.json())\n\t\t\t.then(txns => {\n\t\t\t\tsetTransactions(txns);\n\t\t\t})\n\t}\n\n\tconst fetchPaymentChannels = () => {\n\t\tfetch('http://localhost:3000/api/v1/payment_channels', {\n\t\t\tmethod: 'GET',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t'Accept': 'application/json',\n\t\t\t\t'Authorization': localStorage.getItem('token')\n\t\t\t}\n\t\t})\n\t\t\t.then(response => response.json())\n\t\t\t.then(response => {\n\t\t\t\tsetPaymentChannels([...response.channels])\n\t\t\t})\n\t}\n\n\tuseEffect(() => fetchPaymentChannels(), []);\n\n\tconst handleSubmit = (e) => {\n\t\te.preventDefault();\n\n\t\tconst data = {\n\t\t\texpense: {\n\t\t\t  name: transactionName,\n\t\t\t  amount: transactionAmount,\n\t\t\t\tpayment_channel: selectedPaymentChannel\n\t\t\t}\n\t\t}\n\n\t\tfetch('http://localhost:3000/api/v1/expenses', {\n\t\t    method: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t'Accept': 'application/json',\n\t\t\t\t'Authorization': localStorage.getItem('token')\n\t\t\t},\n\t\t\tbody: JSON.stringify(data)\n\t\t})\n\t}\n\n\tconst handleChannelChange = (channel) => {\n\t  viewPaymentsByChannel(channel);\n\t}\n\n\tconst handleMonthChange = (channel) => {\n\t  viewPaymentsByMonth(channel);\n\t}\n\n\tconst handleDateChange = (date) => {\n\t  viewPaymentsByDate(date);\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<h1>What did you spend on?</h1>\n\t\t\t<form onSubmit={e => handleSubmit(e)}>\n\t\t\t  <input\n\t\t\t  \ttype='text'\n\t\t\t  \tname='transactionName'\n\t\t\t    placeholder='I spent on...'\n\t\t\t  \tvalue={transactionName}\n\t\t\t  \tonChange={e => setTransactionName(e.target.value)}\n\t\t\t  >\n\t\t\t  </input>\n\t\t\t  <input\n\t\t\t  \ttype='text'\n\t\t\t  \tname='transactionAmount'\n\t\t\t    placeholder='For RM...'\n\t\t\t\t\tvalue={transactionAmount > 0 ? transactionAmount : ''}\n\t\t\t  \tonChange={e => setTransactionAmount(e.target.value)}\n\t\t\t  >\n\t\t\t  </input>\n\t\t\t\t<select\n\t\t\t\t\tname='paymentChannels'\n\t\t\t\t\tonChange={e => setSelectedPaymentChannel(e.target.value)}\n\t\t\t\t>\n\t\t\t\t\t{paymentChannels.map((channel, index) => <option value={channel} key={channel}>{channel}</option>)}\n\t\t\t\t</select>\n\t\t\t  <input\n\t\t\t\t\ttype='submit'\n\t\t\t\t\tvalue='Add Transaction'\n\t\t\t  />\n\t\t\t</form>\n\t\t\t<button\n\t\t\t\tonClick={() => viewAllTransactions()}\n\t\t\t>\n\t\t\t  All Transactions\n\t\t\t</button>\n\t\t\t<h3>\n\t\t\t\tView expenses by channel\n\t\t\t</h3>\n\t\t\t<select\n\t\t\t\tname='transactionsByPaymentChannel'\n\t\t\t\tonChange={e => handleChannelChange(e.target.value)}\n\t\t\t>\n\t\t\t\t{paymentChannels.map(channel => <option value={channel} key={channel}>{channel}</option>)}\n\t\t\t</select>\n\t\t\t<h3>\n\t\t\t\tView expenses by month\n\t\t\t</h3>\n\t\t\t<select\n\t\t\t\tname='transactionsByMonth'\n\t\t\t\tonChange={e => handleMonthChange(e.target.value)}\n\t\t\t>\n\t\t\t\t{MONTHS.map(month=> <option value={month} key={month}>{month}</option>)}\n\t\t\t</select>\n\t\t\t<input \n\t\t\t  label='date'\n\t\t\t  type='date'\n\t\t\t  onChange={e => handleDateChange(e.target.value)}>\n\t\t\t</input>\n\t\t\t<div>\n\t\t\t\t<ul>\n\t\t\t\t\t{transactions.map(txn => <li key={txn.id}>{txn.name}: {txn.amount}</li>)}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Transaction;\n",{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":10,"column":9,"nodeType":"33","messageId":"34","endLine":10,"endColumn":30},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"no-unused-vars","'transactionsByChannel' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]